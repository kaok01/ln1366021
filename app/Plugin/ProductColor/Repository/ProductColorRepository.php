<?php
/*
* This file is part of EC-CUBE
*
* Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
* http://www.lockon.co.jp/
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

namespace Plugin\ProductColor\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ProductColor
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductColorRepository extends EntityRepository
{
    /**
     * find all
     *
     * @return type
     */
    public function findAll()
    {

        $query = $this
            ->getEntityManager()
            ->createQuery('SELECT m FROM Plugin\ProductColor\Entity\ProductColor m ORDER BY m.rank DESC');
        $result = $query
            ->getResult(Query::HYDRATE_ARRAY);

        return $result;
    }

    /**
     * @param  \Plugin\ProductColor\Entity\ProductColor $ProductColor
     * @return void
     */
    public function up(\Plugin\ProductColor\Entity\ProductColor $ProductColor)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $rank = $ProductColor->getRank();

            $ProductColorUp = $this->createQueryBuilder('m')
                ->where('m.rank > :rank')
                ->setParameter('rank', $rank)
                ->orderBy('m.rank', 'ASC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $ProductColor->setRank($ProductColorUp->getRank());
            $ProductColorUp->setRank($rank);

            $em->persist($ProductColor);
            $em->persist($ProductColorUp);

            $em->flush();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
	}

    /**
     * @param  \Plugin\ProductColor\Entity\ProductColor $ProductColor
     * @return bool
     */
    public function down(\Plugin\ProductColor\Entity\ProductColor $ProductColor)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $rank = $ProductColor->getRank();

            $ProductColorDown = $this->createQueryBuilder('m')
                ->where('m.rank < :rank ')
                ->setParameter('rank', $rank)
                ->orderBy('m.rank', 'DESC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $ProductColor->setRank($ProductColorDown->getRank());
            $ProductColorDown->setRank($rank);

            $em->persist($ProductColor);
            $em->persist($ProductColorDown);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * @param  \Plugin\ProductColor\Entity\ProductColor $ProductColor
     * @return bool
     */
    public function save(\Plugin\ProductColor\Entity\ProductColor $ProductColor)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            if (!$ProductColor->getId()) {
                $rank = $this->createQueryBuilder('m')
                    ->select('MAX(m.rank)')
                    ->getQuery()
                    ->getSingleScalarResult();
                if (!$rank) {
                    $rank = 0;
                }
                $ProductColor->setRank($rank + 1);
                $ProductColor->setDelFlg(0);

                $em->createQueryBuilder()
                    ->update('Plugin\ProductColor\Entity\ProductColor', 'm')
                    ->set('m.rank', 'm.rank + 1')
                    ->where('m.rank > :rank')
                    ->setParameter('rank', $rank)
                    ->getQuery()
                    ->execute();
            }

            $em->persist($ProductColor);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }
        return true;
    }

    /**
     * @param  \Plugin\ProductColor\Entity\ProductColor $ProductColor
     * @return bool
     */
    public function delete(\Plugin\ProductColor\Entity\ProductColor $ProductColor)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $ProductColor->setDelFlg(1);
            $em->persist($ProductColor);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

}
